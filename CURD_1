---------------- Persistence Controller -----------------------------

struct PersistenceController {
    // A singleton for our entire app to use
    static let shared = PersistenceController()

    // Storage for Core Data
    let container: NSPersistentContainer

    // A test configuration for SwiftUI previews
    static var preview: PersistenceController = {
        let controller = PersistenceController(inMemory: true)

        // Create 10 example programming languages.
        for _ in 0..<10 {
            let language = ProgrammingLanguage(context: controller.container.viewContext)
            language.name = "Example Language 1"
            language.creator = "A. Programmer"
        }

        return controller
    }()

    // An initializer to load Core Data, optionally able
    // to use an in-memory store.
    init(inMemory: Bool = false) {
        // If you didn't name your model Main you'll need
        // to change this name below.
        container = NSPersistentContainer(name: "Main")

        if inMemory {
            container.persistentStoreDescriptions.first?.url = URL(fileURLWithPath: "/dev/null")
        }

        container.loadPersistentStores { description, error in
            if let error = error {
                fatalError("Error: \(error.localizedDescription)")
            }
        }
    }
}

----------- save() method to your PersistenceController class so that it checks whether the context has changes and commits them if needed. ----------------------------


func save() {
    let context = container.viewContext

    if context.hasChanges {
        do {
            try context.save()
        } catch {
            // Show some error here
        }
    }
}


---------------- Adding item from  SwiftUI View -----------------------------------------------
@FetchRequest(
    sortDescriptors: [
        SortDescriptor(\.name)
    ]
) var languages: FetchedResults<ProgrammingLanguage>



---------------- Fetching item from  SwiftUI View -----------------------------------------------
@FetchRequest(
    sortDescriptors: [
        SortDescriptor(\.name)
    ]
) var languages: FetchedResults<ProgrammingLanguage>


---------------- Deleting item from  SwiftUI View -----------------------------------------------
List {
    ForEach(languages) { language in
        Text("Creator: \(language.creator ?? "Anonymous")")
    }
    .onDelete(perform: removeLanguages)
}

func removeLanguages(at offsets: IndexSet) {
    for index in offsets {
        let language = languages[index]
        managedObjectContext.delete(language)
    }
}

----------------------------------------------------------------------------------------------------
